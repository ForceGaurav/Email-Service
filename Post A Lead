global  class CreateLeadFromEmail implements Messaging.InboundEmailHandler{
    global Messaging.InboundEmailResult handleInboundEmail(Messaging.InboundEmail email,Messaging.InboundEnvelope envelope) {
        Messaging.InboundEmailResult result = new Messaging.InboundEmailresult();
        Messaging.InboundEmail.TextAttachment[] tAttachments = email.textAttachments;
        Messaging.InboundEmail.BinaryAttachment[] binarychments = email.binaryAttachments;
        
        try{
            String subToCompare=System.Label.LeadEmailSubjectName; // Custom Label to store the Email Subject Name
            if(email.subject.equalsIgnoreCase(subToCompare)){
                Lead leadrecord=new Lead();
                leadrecord.lastname=String.valueof(email.plainTextBody).substring(0,80);
                leadrecord.email=email.fromAddress;
                leadrecord.Company=subToCompare+'-'+String.valueof(email.plainTextBody).substring(0,20);
                insert leadrecord;
                // Save attachments, if any
                if(tAttachments!=NULL && !tAttachments.isEmpty()){
                    for (Messaging.Inboundemail.TextAttachment textachment : tAttachments) {
                        Attachment attachment = new Attachment();
                        attachment.Name = textachment.fileName;
                        attachment.Body = Blob.valueOf(textachment.body);
                        attachment.ParentId = leadrecord.Id;
                        insert attachment;
                    } 
                }
               
                //Save any Binary Attachment
                if(binarychments!=NULL && !binarychments.isEmpty()){
                    for (Messaging.Inboundemail.BinaryAttachment bAttachment : binarychments) {
                        Attachment attachment = new Attachment();
                        attachment.Name = bAttachment.fileName;
                        attachment.Body = bAttachment.body;
                        attachment.ParentId = leadrecord.Id;
                        insert attachment;
                    }
                }
                sendEmail(leadrecord);
            }
        }
        catch(Exception e){
            System.debug('Error While Processing the Email Service-->'+e.getMessage());
        }
        result.success = true;
        return result;
    }
    public void sendEmail(Lead leadrecord){
        String EmailtoReply=System.label.SendEmailtoSalesTeam;// Sent Email to sales team
        Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();
        String[] toAddresses = new String[]{EmailtoReply}; 
            String subject = 'Lead Record Succesfully Created '+ Datetime.now().day() +'-'+Datetime.now().format('MMM') + ' ' +Datetime.now().year();
        email.setSubject(subject);
        email.setToAddresses(toAddresses);
        email.setPlainTextBody('A new lead successfully processed, Please click on the url to open the record--'+System.URL.getSalesforceBaseURL()+'/'+leadrecord.Id);
        Messaging.SendEmailResult[] r = Messaging.sendEmail(new Messaging.SingleEmailMessage[]{email});
    }
}
